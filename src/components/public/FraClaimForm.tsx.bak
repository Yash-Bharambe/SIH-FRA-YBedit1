import React, { FC, useState, ChangeEvent, FormEvent } from 'react';
import { useToast } from '../../contexts/ToastContext';
import { claimsService, NewClaimData } from '../../services/claimsService';

type ClaimFormData = NewClaimData;

interface DocumentUploadProps {
  label: string;
  description: string;
  documentType: keyof ClaimFormData['documents'];
  file: File | null;
  onFileChange: (e: ChangeEvent<HTMLInputElement>, type: keyof ClaimFormData['documents']) => void;
}

const DocumentUpload: FC<DocumentUploadProps> = ({ label, description, documentType, file, onFileChange }) => (
  <div className="relative">
    <label className="block text-sm font-medium text-gray-700 mb-1">
      {label} <span className="text-red-500">*</span>
    </label>
    <p className="text-xs text-gray-500 mb-2">{description}</p>
    <div className={`relative border-2 border-dashed rounded-lg p-4 ${
      file ? 'border-green-200 bg-green-50' : 'border-gray-300 hover:border-gray-400'
    }`}>
      <input
        type="file"
        onChange={(e) => onFileChange(e, documentType)}
        accept=".pdf,.jpg,.jpeg,.png"
        className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
        required
      />
      <div className="flex items-center justify-center">
        {file ? (
          <div className="text-sm text-green-600 flex items-center">
            <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
            </svg>
            {file.name}
          </div>
        ) : (
          <div className="text-sm text-gray-600 text-center">
            <svg className="mx-auto h-8 w-8 mb-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3 3m0 0l-3-3m3 3v-7" />
            </svg>
            <span>Click or drop file here</span>
            <span className="block text-xs mt-1">PDF, JPG, PNG up to 10MB</span>
          </div>
        )}
      </div>
    </div>
  </div>
);

const FraClaimForm: FC = () => {
  const { showSuccess, showError } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState<ClaimFormData>({
    claimType: 'IFR',
    guardianName: '',
    gender: '',
    age: '',
    tribalGroup: '',
    landArea: '',
    landUnit: 'hectares',
    surveyNumber: '',
    documents: {
      identityProof: null,
      tribeCertificate: null,
      fraClaimForm: null,
      gramSabhaResolution: null
    }
  });

  const handleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleFileUpload = (e: ChangeEvent<HTMLInputElement>, documentType: keyof ClaimFormData['documents']) => {
    const file = e.target.files?.[0] || null;
    setFormData(prev => ({
      ...prev,
      documents: {
        ...prev.documents,
        [documentType]: file
      }
    }));
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    
    // Validate required fields
    const requiredFields = ['guardianName', 'gender', 'age', 'tribalGroup', 'landArea'];
    const missingFields = requiredFields.filter(field => !formData[field as keyof ClaimFormData]);
    
    if (missingFields.length > 0) {
      showError(`Please fill in all required fields: ${missingFields.join(', ')}`);
      return;
    }

    // Validate document uploads
    const missingDocs = Object.entries(formData.documents)
      .filter(([_, file]) => !file)
      .map(([key]) => key);

    if (missingDocs.length > 0) {
      showError(`Please upload all required documents: ${missingDocs.map(d => d.replace(/([A-Z])/g, ' $1').toLowerCase()).join(', ')}`);
      return;
    }

    setIsSubmitting(true);

    try {
      // Submit claim using claimsService
      const result = await claimsService.submitClaim(formData);
      
      if (result) {
        showSuccess('Your claim has been successfully submitted! You will be notified of any updates.');
        
        // Reset form
        setFormData({
          claimType: 'IFR',
          guardianName: '',
          gender: '',
          age: '',
          tribalGroup: '',
          landArea: '',
          landUnit: 'hectares',
          surveyNumber: '',
          documents: {
            identityProof: null,
            tribeCertificate: null,
            fraClaimForm: null,
            gramSabhaResolution: null
          }
        });
      } else {
        throw new Error('Failed to submit claim');
      }
    } catch (error) {
      showError('There was an error submitting your claim. Please try again or contact support if the problem persists.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const renderFileUpload = (doc: { key: string; label: string; description: string }) => (
    <div key={doc.key} className="relative">
      <label className="block text-sm font-medium text-gray-700 mb-1">
        {doc.label} <span className="text-red-500">*</span>
      </label>
      <p className="text-xs text-gray-500 mb-2">{doc.description}</p>
      <div className={`relative border-2 border-dashed rounded-lg p-4 ${
        formData.documents[doc.key as keyof typeof formData.documents]
          ? 'border-green-200 bg-green-50'
          : 'border-gray-300 hover:border-gray-400'
      }`}>
        <input
          type="file"
          onChange={(e) => handleFileUpload(e, doc.key as keyof typeof formData.documents)}
          accept=".pdf,.jpg,.jpeg,.png"
          className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
          required
        />
        <div className="flex items-center justify-center">
          {formData.documents[doc.key as keyof typeof formData.documents] ? (
            <div className="text-sm text-green-600 flex items-center">
              <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              {formData.documents[doc.key as keyof typeof formData.documents]?.name}
            </div>
          ) : (
            <div className="text-sm text-gray-600 text-center">
              <svg className="mx-auto h-8 w-8 mb-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3 3m0 0l-3-3m3 3v-7" />
              </svg>
              <span>Click or drop file here</span>
              <span className="block text-xs mt-1">PDF, JPG, PNG up to 10MB</span>
            </div>
          )}
        </div>
      </div>
    </div>
  );

  return (
    <div className="max-w-4xl mx-auto bg-white p-8 rounded-xl shadow-lg border border-gray-100">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-gray-900">Forest Rights Claim Form</h2>
        <p className="mt-2 text-gray-600">Submit your forest rights claim under the Forest Rights Act</p>
      </div>
      
      <form onSubmit={handleSubmit} className="space-y-8">
        {/* Claim Type Section */}
        <div className="bg-gray-50 p-6 rounded-lg border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Type of Forest Rights Claim</h3>
          <div className="space-y-4">
            <div className="flex items-center space-x-4">
              {['IFR', 'CFRR', 'CR'].map((type) => (
                <label key={type} className="flex-1">
                  <input
                    type="radio"
                    name="claimType"
                    value={type}
                    checked={formData.claimType === type}
                    onChange={handleInputChange}
                    className="sr-only"
                  />
                  <div className={`cursor-pointer p-4 rounded-lg border-2 text-center transition-all ${
                    formData.claimType === type 
                      ? 'border-green-500 bg-green-50 text-green-700' 
                      : 'border-gray-200 hover:border-gray-300'
                  }`}>
                    <div className="font-medium">
                      {type === 'IFR' && 'Individual Forest Rights'}
                      {type === 'CFRR' && 'Community Forest Resource Rights'}
                      {type === 'CR' && 'Community Rights'}
                    </div>
                  </div>
                </label>
              ))}
            </div>
          </div>
        </div> </form>

        {/* Personal Information Section */}
        <div className="bg-gray-50 p-6 rounded-lg border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Personal Information</h3>
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="guardianName" className="block text-sm font-medium text-gray-700 mb-1">
                  Father/Mother/Spouse Name <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="guardianName"
                  name="guardianName"
                  value={formData.guardianName}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-lg border border-gray-300 px-4 py-2.5 bg-white focus:border-green-500 focus:outline-none focus:ring-1 focus:ring-green-500 transition-colors"
                  required
                />
              </div>

              <div>
                <label htmlFor="tribalGroup" className="block text-sm font-medium text-gray-700 mb-1">
                  Caste / Tribal Group <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="tribalGroup"
                  name="tribalGroup"
                  value={formData.tribalGroup}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-lg border border-gray-300 px-4 py-2.5 bg-white focus:border-green-500 focus:outline-none focus:ring-1 focus:ring-green-500 transition-colors"
                  required
                />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="gender" className="block text-sm font-medium text-gray-700 mb-1">
                  Gender <span className="text-red-500">*</span>
                </label>
                <select
                  id="gender"
                  name="gender"
                  value={formData.gender}
                  onChange={handleInputChange}
                  className="mt-1 block w-full rounded-lg border border-gray-300 px-4 py-2.5 bg-white focus:border-green-500 focus:outline-none focus:ring-1 focus:ring-green-500 transition-colors"
                  required
                >
                  <option value="">Select Gender</option>
                  <option value="male">Male</option>
                  <option value="female">Female</option>
                  <option value="other">Other</option>
                </select>
              </div>

              <div>
                <label htmlFor="age" className="block text-sm font-medium text-gray-700 mb-1">
                  Age <span className="text-red-500">*</span>
                </label>
                <input
                  type="number"
                  id="age"
                  name="age"
                  value={formData.age}
                  onChange={handleInputChange}
                  min="18"
                  max="120"
                  className="mt-1 block w-full rounded-lg border border-gray-300 px-4 py-2.5 bg-white focus:border-green-500 focus:outline-none focus:ring-1 focus:ring-green-500 transition-colors"
                  required
                />
              </div>
            </div>
          </div>
        </div>
            name="tribalGroup"
            value={formData.tribalGroup}
            onChange={handleInputChange}
            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-green-500 focus:outline-none focus:ring-green-500"
            required
          />
        </div>

        {/* Location Information Section */}
        <div className="bg-gray-50 p-6 rounded-lg border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Location Details</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Village</label>
              <div className="px-4 py-2.5 bg-gray-100 rounded-lg border border-gray-200 text-gray-700 font-medium">
                Podochunapadar
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">District</label>
              <div className="px-4 py-2.5 bg-gray-100 rounded-lg border border-gray-200 text-gray-700 font-medium">
                Rayagada
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">State</label>
              <div className="px-4 py-2.5 bg-gray-100 rounded-lg border border-gray-200 text-gray-700 font-medium">
                Odisha
              </div>
            </div>
          </div>
        </div>

        {/* Land Information Section */}
        <div className="bg-gray-50 p-6 rounded-lg border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Land Information</h3>
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="landArea" className="block text-sm font-medium text-gray-700 mb-2">
                  Land Area <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <input
                    type="number"
                    id="landArea"
                    name="landArea"
                    value={formData.landArea}
                    onChange={handleInputChange}
                    step="0.01"
                    min="0"
                    className="block w-full rounded-lg border border-gray-300 pl-4 pr-12 py-2.5 bg-white focus:border-green-500 focus:outline-none focus:ring-1 focus:ring-green-500 transition-colors"
                    required
                  />
                  <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none text-gray-500">
                    {formData.landUnit === 'hectares' ? 'ha' : 'ac'}
                  </div>
                </div>
              </div>
              <div>
                <label htmlFor="landUnit" className="block text-sm font-medium text-gray-700 mb-2">Unit</label>
                <select
                  id="landUnit"
                  name="landUnit"
                  value={formData.landUnit}
                  onChange={handleInputChange}
                  className="block w-full rounded-lg border border-gray-300 px-4 py-2.5 bg-white focus:border-green-500 focus:outline-none focus:ring-1 focus:ring-green-500 transition-colors"
                >
                  <option value="hectares">Hectares</option>
                  <option value="acres">Acres</option>
                </select>
              </div>
            </div>

            <div>
              <label htmlFor="surveyNumber" className="block text-sm font-medium text-gray-700 mb-2">
                Survey Number / GPS Coordinates
              </label>
              <input
                type="text"
                id="surveyNumber"
                name="surveyNumber"
                value={formData.surveyNumber}
                onChange={handleInputChange}
                className="block w-full rounded-lg border border-gray-300 px-4 py-2.5 bg-white focus:border-green-500 focus:outline-none focus:ring-1 focus:ring-green-500 transition-colors"
                placeholder="Enter survey number or coordinates"
              />
            </div>
          </div>
        </div>
        </div>

        {/* Document Uploads */}
        <div className="bg-gray-50 p-6 rounded-lg border border-gray-200">
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Required Documents</h3>
            <p className="text-gray-600 text-sm mb-6">Please upload clear, legible scanned copies or photos of the following documents</p>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {[
                { key: 'identityProof', label: 'Identity Proof', description: 'Aadhar Card, Voter ID, or any government-issued ID' },
                { key: 'tribeCertificate', label: 'Tribe/Community Certificate', description: 'Certificate issued by competent authority' },
                { key: 'fraClaimForm', label: 'FRA Claim Form (Form-A)', description: 'Duly filled and signed Form-A' },
                { key: 'gramSabhaResolution', label: 'Gram Sabha Resolution', description: 'Resolution copy with village seal' }
              ].map(doc => (
                <DocumentUpload
                  key={doc.key}
                  label={doc.label}
                  description={doc.description}
                  documentType={doc.key as keyof ClaimFormData['documents']}
                  file={formData.documents[doc.key as keyof typeof formData.documents]}
                  onFileChange={handleFileUpload}
                />
              ))}
            </div>
          </div>
        </div>

        {/* Submit Button */}
        <div className="bg-gray-50 p-6 rounded-lg border border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-semibold text-gray-900">Submit Your Claim</h3>
              <p className="text-sm text-gray-600 mt-1">Please review all information before submitting</p>
            </div>
            <button
              type="submit"
              disabled={isSubmitting}
              className={`
                px-8 py-3 text-white text-lg font-medium rounded-lg
                transition-colors relative
                ${isSubmitting 
                  ? 'bg-green-500 cursor-not-allowed'
                  : 'bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2'
                }
              `}
            >
              {isSubmitting ? (
                <>
                  <span className="opacity-0">Submit Claim</span>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                    </svg>
                  </div>
                </>
              ) : (
                'Submit Claim'
              )}
            </button>
          </div>
        </div>
      </form>
    </div>
  );

export default FraClaimForm;